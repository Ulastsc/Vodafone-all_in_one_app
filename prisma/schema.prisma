// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* ---------- Organization / Team / User / Membership ---------- */

model Organization {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String   @unique
  teams     Team[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id             Int           @id @default(autoincrement())
  key            String        @unique        // e.g. UAM, AUDIT_CHANGE, REPORTING
  name           String
  organizationId Int
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberships    Membership[]
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  name           String
  role          String         // "manager" | "user"
  organizationId Int
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  memberships    Membership[]

  // NextAuth (gerekirse)
  accounts Account[]
  sessions Session[]
}

model Membership {
  id     Int  @id @default(autoincrement())
  userId Int
  teamId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

/* -------------------- NextAuth standart modelleri -------------------- */

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
